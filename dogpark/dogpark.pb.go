// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dogpark.proto

/*
Package dogpark is a generated protocol buffer package.

It is generated from these files:
	dogpark.proto

It has these top-level messages:
	DogParkRequest
	DogParkResponse
	DogParkFilter
*/
package dogpark

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new dogpark
type DogParkRequest struct {
	Id        int32                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Website   string                    `protobuf:"bytes,3,opt,name=website" json:"website,omitempty"`
	Addresses []*DogParkRequest_Address `protobuf:"bytes,4,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *DogParkRequest) Reset()                    { *m = DogParkRequest{} }
func (m *DogParkRequest) String() string            { return proto.CompactTextString(m) }
func (*DogParkRequest) ProtoMessage()               {}
func (*DogParkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DogParkRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DogParkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DogParkRequest) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *DogParkRequest) GetAddresses() []*DogParkRequest_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type DogParkRequest_Address struct {
	Street string `protobuf:"bytes,1,opt,name=street" json:"street,omitempty"`
	City   string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State  string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Zip    string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
}

func (m *DogParkRequest_Address) Reset()                    { *m = DogParkRequest_Address{} }
func (m *DogParkRequest_Address) String() string            { return proto.CompactTextString(m) }
func (*DogParkRequest_Address) ProtoMessage()               {}
func (*DogParkRequest_Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *DogParkRequest_Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *DogParkRequest_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *DogParkRequest_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *DogParkRequest_Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type DogParkResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *DogParkResponse) Reset()                    { *m = DogParkResponse{} }
func (m *DogParkResponse) String() string            { return proto.CompactTextString(m) }
func (*DogParkResponse) ProtoMessage()               {}
func (*DogParkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DogParkResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DogParkResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DogParkFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *DogParkFilter) Reset()                    { *m = DogParkFilter{} }
func (m *DogParkFilter) String() string            { return proto.CompactTextString(m) }
func (*DogParkFilter) ProtoMessage()               {}
func (*DogParkFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DogParkFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*DogParkRequest)(nil), "dogpark.DogParkRequest")
	proto.RegisterType((*DogParkRequest_Address)(nil), "dogpark.DogParkRequest.Address")
	proto.RegisterType((*DogParkResponse)(nil), "dogpark.DogParkResponse")
	proto.RegisterType((*DogParkFilter)(nil), "dogpark.DogParkFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DogPark service

type DogParkClient interface {
	// Get all DogParks with filter - A server-to-client streaming RPC.
	GetDogParks(ctx context.Context, in *DogParkFilter, opts ...grpc.CallOption) (DogPark_GetDogParksClient, error)
	// Create a new DogPark - A simple RPC
	CreateDogPark(ctx context.Context, in *DogParkRequest, opts ...grpc.CallOption) (*DogParkResponse, error)
}

type dogParkClient struct {
	cc *grpc.ClientConn
}

func NewDogParkClient(cc *grpc.ClientConn) DogParkClient {
	return &dogParkClient{cc}
}

func (c *dogParkClient) GetDogParks(ctx context.Context, in *DogParkFilter, opts ...grpc.CallOption) (DogPark_GetDogParksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DogPark_serviceDesc.Streams[0], c.cc, "/dogpark.DogPark/GetDogParks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dogParkGetDogParksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DogPark_GetDogParksClient interface {
	Recv() (*DogParkRequest, error)
	grpc.ClientStream
}

type dogParkGetDogParksClient struct {
	grpc.ClientStream
}

func (x *dogParkGetDogParksClient) Recv() (*DogParkRequest, error) {
	m := new(DogParkRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dogParkClient) CreateDogPark(ctx context.Context, in *DogParkRequest, opts ...grpc.CallOption) (*DogParkResponse, error) {
	out := new(DogParkResponse)
	err := grpc.Invoke(ctx, "/dogpark.DogPark/CreateDogPark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DogPark service

type DogParkServer interface {
	// Get all DogParks with filter - A server-to-client streaming RPC.
	GetDogParks(*DogParkFilter, DogPark_GetDogParksServer) error
	// Create a new DogPark - A simple RPC
	CreateDogPark(context.Context, *DogParkRequest) (*DogParkResponse, error)
}

func RegisterDogParkServer(s *grpc.Server, srv DogParkServer) {
	s.RegisterService(&_DogPark_serviceDesc, srv)
}

func _DogPark_GetDogParks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DogParkFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DogParkServer).GetDogParks(m, &dogParkGetDogParksServer{stream})
}

type DogPark_GetDogParksServer interface {
	Send(*DogParkRequest) error
	grpc.ServerStream
}

type dogParkGetDogParksServer struct {
	grpc.ServerStream
}

func (x *dogParkGetDogParksServer) Send(m *DogParkRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _DogPark_CreateDogPark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DogParkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogParkServer).CreateDogPark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogpark.DogPark/CreateDogPark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogParkServer).CreateDogPark(ctx, req.(*DogParkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DogPark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogpark.DogPark",
	HandlerType: (*DogParkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDogPark",
			Handler:    _DogPark_CreateDogPark_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDogParks",
			Handler:       _DogPark_GetDogParks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dogpark.proto",
}

func init() { proto.RegisterFile("dogpark.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0xc6, 0x59, 0xfe, 0xad, 0x0c, 0x01, 0xcd, 0xc4, 0x60, 0xc3, 0x45, 0xb2, 0x27, 0xbc, 0x10,
	0x83, 0x47, 0xe3, 0x41, 0x25, 0x7a, 0x35, 0x7b, 0xf7, 0x50, 0xe8, 0x84, 0x34, 0x28, 0x5d, 0x3b,
	0x25, 0x04, 0x5f, 0xc3, 0xd7, 0xf4, 0x21, 0xcc, 0x76, 0x5b, 0x8c, 0x12, 0x6e, 0xf3, 0x9b, 0x7e,
	0x33, 0xf3, 0xcd, 0x14, 0x7a, 0xca, 0x2c, 0x0b, 0x69, 0x57, 0x93, 0xc2, 0x1a, 0x67, 0x30, 0x0d,
	0x98, 0x7d, 0x27, 0xd0, 0x9f, 0x99, 0xe5, 0x8b, 0xb4, 0xab, 0x9c, 0x3e, 0x36, 0xc4, 0x0e, 0xfb,
	0x50, 0xd7, 0x4a, 0x24, 0xa3, 0x64, 0xdc, 0xca, 0xeb, 0x5a, 0x21, 0x42, 0x73, 0x2d, 0xdf, 0x49,
	0xd4, 0x47, 0xc9, 0xb8, 0x93, 0xfb, 0x18, 0x05, 0xa4, 0x5b, 0x9a, 0xb3, 0x76, 0x24, 0x1a, 0x3e,
	0x1d, 0x11, 0xef, 0xa0, 0x23, 0x95, 0xb2, 0xc4, 0x4c, 0x2c, 0x9a, 0xa3, 0xc6, 0xb8, 0x3b, 0xbd,
	0x9c, 0xc4, 0xe1, 0x7f, 0x27, 0x4d, 0xee, 0x2b, 0x61, 0xfe, 0x5b, 0x31, 0x7c, 0x85, 0x34, 0x64,
	0x71, 0x00, 0x6d, 0x76, 0x96, 0xc8, 0x79, 0x2f, 0x9d, 0x3c, 0x50, 0xe9, 0x67, 0xa1, 0xdd, 0x2e,
	0xfa, 0x29, 0x63, 0x3c, 0x87, 0x16, 0x3b, 0xb9, 0x77, 0x53, 0x01, 0x9e, 0x41, 0xe3, 0x53, 0x17,
	0xa2, 0xe9, 0x73, 0x65, 0x98, 0xdd, 0xc2, 0xe9, 0xde, 0x03, 0x17, 0x66, 0xcd, 0x74, 0xb0, 0xae,
	0x80, 0x94, 0x37, 0x8b, 0x05, 0x31, 0xfb, 0x09, 0x27, 0x79, 0xc4, 0xec, 0x0a, 0x7a, 0xa1, 0xf8,
	0x49, 0xbf, 0x39, 0xb2, 0xa5, 0x74, 0x45, 0xbb, 0xad, 0xb1, 0x2a, 0x58, 0x8c, 0x38, 0xfd, 0x4a,
	0x20, 0x0d, 0x5a, 0x7c, 0x80, 0xee, 0x33, 0xb9, 0x40, 0x8c, 0x83, 0xff, 0xd7, 0xa8, 0x9a, 0x0d,
	0x2f, 0x8e, 0x5c, 0x29, 0xab, 0x5d, 0x27, 0x38, 0x83, 0xde, 0xa3, 0x25, 0xe9, 0x28, 0x36, 0x3d,
	0xa6, 0x1e, 0x8a, 0xc3, 0x87, 0x6a, 0xd1, 0xac, 0x36, 0x6f, 0xfb, 0xcf, 0xbf, 0xf9, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0x7e, 0x81, 0xe4, 0x0d, 0x02, 0x00, 0x00,
}
